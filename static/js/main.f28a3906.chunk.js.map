{"version":3,"sources":["FileImport.js","notation.js","Pattern.js","utilities.js","track.js","h2.js","formatSettings.js","instrumentConfig.js","instrumentation.js","App.js","serviceWorker.js","index.js"],"names":["FileImport","props","onChange","bind","e","fileObject","target","files","reader","FileReader","onload","loadEvent","onImport","file","content","result","readAsText","type","this","React","Component","notation","config","patternResolution","beatResolution","Error","lineResolution","str","chunkSize","match","RegExp","patternSize","validateConfig","lineLength","Math","min","beatCount","ceil","numberMarkerArray","Array","from","numberRestMark","beat","toString","join","line","beatChunkSize","lineWithBeats","showBeatMark","chunkString","beatMark","lineMark","instrument","trackDict","formatConfig","Object","keys","propName","DEFAULT_FORMAT_CONFIG","hasOwnProperty","assign","instrumentTracks","values","length","resolution","notationLength","patternArray","fill","restMark","charIndex","entries","trackID","trackSymbol","trackInstance","rep","patternString","lineArray","formattedLineArray","showBeatNumbers","push","formatLineWithMarkers","createNumberMarker","i","FORMAT_CONFIG_STRINGS","FORMAT_CONFIG_BOOLS","Pattern","state","instruments","configOverride","page","instrumentName","notationString","fromInstrumentAndTrack","tracks","split","x","classes","className","root","formatText","map","index","key","withStyles","theme","spacing","fontFamily","textAlign","whiteSpace","calculateResolution","positions","size","implicitPositions","concat","b","allNotesPass","track","reduce","a","count","other","_sumOverlapsOfArrays","hcf","y","max","findHCF","formatResolution","totalLength","points","toPoints","representPoints","arrayIndex","s","p","resolutionToUse","parseHydrogenJs","instrumentElements","song","instrumentList","instrumentArray","element","parseInt","id","name","parseFloat","volume","isMuted","gain","patternElements","patternList","pattern","noteElements","noteList","note","notes","noteElement","position","filter","n","patternsWithTracks","calculatePatternResolution","relevantNotes","relevantHits","fromPositions","xmlString","parser","xml2js","Parser","parseStringPromise","then","parseHydrogenPromise","useStyles","makeStyles","formControl","margin","minWidth","selectEmpty","marginTop","camelToReadable","spacedString","replace","toUpperCase","slice","FormatSettings","stateToItem","value","handleOptionChange","event","updatedState","settings","handleCheckedChange","checked","FormGroup","op","options","idString","FormControl","variant","InputLabel","Select","labelId","MenuItem","createOptionMenu","prev","curr","Divider","FormControlLabel","control","Switch","label","DefaultSettings","display","ThinFormControlLabel","marginLeft","marginRight","InlinableIconButton","padding","IconButton","InstrumentConfig","useState","renamingInstrument","setRenamingInstrument","nameState","setNameState","createCell","TableCell","align","Checkbox","instrumentMask","instrumentID","instrumentIndex","oldInstrumentIndex","findIndex","dstInstrumentIndex","oldInstrument","replacedSrcInstrument","dstInstrument","replacedInstruments","handleChange","createMatchingRow","TableRow","component","scope","Typography","onClick","fontSize","removeInstrument","editSymbol","setEditSymbol","editSymbolState","setEditSymbolState","Fragment","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","DialogActions","Button","color","extraInstrument","TableContainer","Table","table","aria-label","TableHead","currentSymbol","startEditingSymbol","TableBody","createInstrumentMask","baseInstrumentIndex","baseInstrumentId","targetInstrumentIndex","DEFAULT_INSTRUMENT_SYMBOLS","normalizeInstrumentsForFiguring","inst","nInst","toLowerCase","manageAccentOrGhost","accentSymbol","ghostSymbol","outputInstruments","t0","t1","zeroLouder","mapping","activeInstruments","patterns","nonTrivialInstruments","Set","empty","add","activeInstrumentation","active","has","figureInstruments","instrumentsRaw","symbolConfig","output","worthwhileInstruments","relevantTracks","includes","trackIsClick","t","collated","candidate","floor","clickTrack","hitTrack","lastTrack","figureClickyInstruments","djembeTracks","slapArray","toneArray","bassArray","djembeMapping","figureDjembes","figureSnares","figureShakers","instrumentUsed","createMuiTheme","palette","primary","main","secondary","App","selectedPattern","loadedFile","settingsOpen","formatSettings","h2","h","assessedInstruments","setState","patternIndex","Grid","container","item","xs","k","replacedTracks","trackData","createObjects","kuva","optionalAlert","Alert","severity","loadExample","handleFileImport","patternContent","renderPattern","patternToRender","style","width","flexGrow","edge","clsx","hide","Drawer","drawer","anchor","paper","drawerPaper","drawerHeader","patternsReady","mainContent","renderMainContent","ThemeProvider","CssBaseline","drawerContainer","List","ListItem","button","selectPattern","ListItemText","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f28a3906.chunk.js","sourcesContent":["// FileUpload.react.js\n\n// inspired by https://gist.github.com/AshikNesin/e44b1950f6a24cfcd85330ffc1713513\n// and https://stackoverflow.com/questions/55830414/how-to-read-text-file-in-react\n\nimport React from 'react'\n\nclass FileImport extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange(e) {\n    const fileObject = e.target.files[0]\n    const reader = new FileReader()\n    reader.onload = loadEvent => {\n      if( this.props.onImport )\n      {\n        this.props.onImport(\n          { file: fileObject, content : loadEvent.target.result}\n        );\n      }\n    }\n    reader.readAsText(fileObject);\n  }\n\n  render() {\n    return (\n      <input type=\"file\" onChange={this.onChange} />\n   )\n  }\n}\n\nexport default FileImport;\n","\nclass notation\n{\n\n  static DEFAULT_FORMAT_CONFIG = {\n    \"restMark\" : \"-\",\n    \"beatMark\" : \"|\",\n    \"lineMark\" : \"|\",\n    \"numberRestMark\" : \"-\",\n    \"beatResolution\" : 48,\n    \"showBeatMark\" : true,\n    \"showBeatNumbers\" : true,\n    // lineResolution needs to be determined on a per-pattern-basis \n    // so let's just not cut the lines apart, by default\n    \"lineResolution\" : 48 * 16\n  };\n\n  static FORMAT_CONFIG_STRINGS = [\n    [\"restMark\",[\"-\", \".\", \" \"]],\n    [\"numberRestMark\",[\"-\", \".\", \" \"]],\n    [\"beatResolution\",[\"24\", \"48\", \"96\"]]\n  ];\n\n  static FORMAT_CONFIG_BOOLS = [\n    \"showBeatMark\",\n    \"showBeatNumbers\"\n  ];\n\n  static validateConfig(config, patternResolution) {\n    if( patternResolution != null && ( config.beatResolution % patternResolution ) !== 0 )\n    {\n      throw new Error(\"patternResolution doesn't divide beatResolution\");\n    }\n    if( config.lineResolution <= 0 )\n    {\n      throw new Error(\"config.lineResolution doesn't divide patternResolution\");\n    }\n  }\n\n  static chunkString(str, chunkSize) {\n    if( chunkSize <= 0 )\n    {\n      throw new Error(\"chunkSize must be > 0\")\n    }\n    return str.match(new RegExp('.{1,' + chunkSize + '}', 'g'));\n  }\n\n  static createNumberMarker(config, patternResolution, patternSize)\n  {\n    if( patternResolution <= 0 || patternSize <= 0 )\n    {\n      throw new Error(\"(patternResolution, patternSize) arguments <= 0\");\n    }\n    if( ( patternSize % patternResolution) !== 0 )\n    {\n      throw new Error(\"patternSize,doesn't divide patternResolution\");\n    }\n\n    notation.validateConfig(config, patternResolution);\n\n    // note, this assumes that each line makes this match evenly\n    // but ... there's nothing you can do in that case really unless you take an array of lineResolutions\n    const lineLength = Math.min(patternSize, config.lineResolution);\n    let beatCount = Math.ceil(lineLength / config.beatResolution);\n\n    let numberMarkerArray = Array.from( Array(lineLength / patternResolution), e => config.numberRestMark );\n\n    for( let beat = 0; beat < beatCount; beat++ )\n    {\n      numberMarkerArray[ beat * ( config.beatResolution / patternResolution ) ] = ( (beat+1) % 10 ).toString();\n    }\n    return numberMarkerArray.join(\"\");\n  }\n\n  static formatLineWithMarkers(config, line, patternResolution)\n  {\n    notation.validateConfig(config);\n\n    const beatChunkSize = config.beatResolution / patternResolution;\n\n\n    const lineWithBeats = config.showBeatMark ? notation.chunkString(line, beatChunkSize).join(config.beatMark) : line;\n    // note: we choose to always show the lineMarker even if it doesn't match the line resolution\n    return config.lineMark + lineWithBeats + config.lineMark;\n  }\n\n  static fromInstrumentAndTrack(\n    instrument,\n    trackDict,\n    formatConfig = {}\n  )\n  {\n    for( const propName of Object.keys(formatConfig))\n    {\n      if(!notation.DEFAULT_FORMAT_CONFIG.hasOwnProperty(propName))\n      {\n        throw new Error(\"passed unrecognised property \" + propName);\n      }\n    }\n\n    let config = Object.assign( Object.assign({}, notation.DEFAULT_FORMAT_CONFIG), formatConfig );\n\n    let instrumentTracks = Object.values(trackDict);\n    if(instrumentTracks.length === 0)\n    {\n      return \"\";\n    }\n\n    // turn the tracks, into one char string\n\n    const patternSize = instrumentTracks[0].length();\n    const patternResolution = instrumentTracks[0].resolution;\n    const notationLength = instrumentTracks[0].length() / instrumentTracks[0].resolution;\n    // we only format tracks to the correct resolution\n    let patternArray = Array(notationLength).fill(config.restMark);\n    for( let charIndex = 0; charIndex < patternArray.length; ++charIndex)\n    {\n      // todo: handle collisions\n      for( const [trackID, trackSymbol] of Object.entries(instrument) )\n      {\n        const trackInstance = trackDict[trackID];\n        if( trackInstance != null && trackInstance.rep[charIndex] === 1 )\n        {\n          patternArray[charIndex] = trackSymbol;\n        }\n      }\n    }\n    const patternString = patternArray.join(\"\");\n\n    // handle lines and beatMarkers\n    let lineArray = notation.chunkString( patternString, config.lineResolution / patternResolution );\n\n    let formattedLineArray = [];\n    // add numbers on the first line\n    if( config.showBeatNumbers )\n    {\n      formattedLineArray.push( notation.formatLineWithMarkers( \n        config, \n        notation.createNumberMarker(config, patternResolution, patternSize), \n        patternResolution \n      ) );\n    }\n    for( let i = 0; i < lineArray.length; ++i )\n    {\n      formattedLineArray.push( notation.formatLineWithMarkers( config, lineArray[i], patternResolution ));\n    }\n\n    return formattedLineArray.join(\"\\n\");\n  }\n};\n\nexport default notation;","import React from 'react';\nimport notation from \"./notation\"\nimport { withStyles } from '@material-ui/core/styles';\n\nconst useStyles = theme => ({\n  root: {\n    \"margin-bottom\": theme.spacing(2),\n    fontFamily: \"Roboto Mono\",\n    textAlign: \"left\",\n    whiteSpace:\"pre\"\n  },\n});\n\n// const classes = useStyles();\n\nclass Pattern extends React.Component\n{\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  // remove me and relpace with me with something way better\n  // this is taken from the notation formatAsPage code\n  formatText(instruments)\n  {\n    let configOverride = this.props.config;\n    let page = [];\n    for( const [instrumentName, instrument] of instruments )\n    {\n      const notationString = notation.fromInstrumentAndTrack(\n        instrument,\n        this.props.tracks,\n        configOverride\n      );\n      page.push(instrumentName);\n      for( const x of notationString.split(\"\\n\"))\n      {\n        page.push(x);\n      }\n    }\n    return page;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        { this.formatText(this.props.instruments).map((x,index) => <p key={index.toString()}>{x}</p>) }\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(Pattern);","// utilities.js\n\nfunction calculateResolution(positions, size)\n{\n  // hydrogen treats 48 as a beat\n  const basesToTry = [\n    48, // beat\n    24, // 1/2 beat\n    16, // 1/3 beat\n    12, // 1/4\n    8, // 1/6 \n    6, // 1/8\n    4, // 1/12\n    3, // 1/16\n    2, // 1/24\n    1 // 1/48\n  ];\n\n  // note that, fundamentally the size of the pattern is a \"keypoint\"\n  // that needs to be properly recorded by the resolution\n  const implicitPositions = positions.concat( [size] );\n\n  for( const b of basesToTry )\n  {\n    let allNotesPass = true;\n    for( const p of implicitPositions )\n    {\n      if( (p % b) !== 0 )\n      {\n        allNotesPass = false;\n        break;\n      }\n    }\n    if(allNotesPass)\n    {\n      return b;\n    }\n  }\n  throw new Error(\"Failed to predict base\");\n}\n\nexport { calculateResolution };","import { calculateResolution } from \"./utilities\"\n\n// stolen from https://studymaths.co.uk/topics/findingHCFWithJavaScript.php\nfunction findHCF(x, y) {\n\n   // If the input numbers are less than 1 return an error message.\n   if (x < 1 || y < 1) {\n    throw new Error(\"x<1 || y<1\");\n      // return \"Please enter values greater than zero.\";\n   }\n\n   // Now apply Euclid's algorithm to the two numbers.\n   while (Math.max(x, y) % Math.min(x, y) !== 0) {\n      if (x > y) {\n         x %= y;\n      }\n      else {\n         y %= x;\n      }\n   }\n   \n   // When the while loop finishes the minimum of x and y is the HCF.\n   return Math.min(x, y);\n}\n\nclass track\n{\n  \n  constructor(patternArray, resolution)\n  {\n    if(patternArray.length === 0)\n    {\n      throw new Error(\"patternArray must not be zero length\");\n    }\n    this.rep = patternArray;\n    this.resolution = resolution;\n  }\n\n  length()\n  {\n    return this.rep.length * this.resolution;\n  }\n\n  empty()\n  {\n    return this.rep.reduce( (a,b) => ( a + b ) ) === 0;\n  }\n\n  _sumOverlapsOfArrays(a,b)\n  {\n    let count = 0;\n    for( let i = 0; i < a.length; ++i)\n    {\n      if(a[i] && b[i])\n      {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  countOverlaps(other)\n  {\n    if( this.resolution === other.resolution )\n    {\n      return this._sumOverlapsOfArrays( this.rep, other.rep );\n    }\n    else\n    {\n      const hcf = findHCF(this.resolution, other.resolution);\n      const a = this.formatResolution( hcf );\n      const b = other.formatResolution( hcf );\n      return this._sumOverlapsOfArrays( a.rep, b.rep );\n    }\n  }\n\n  static representPoints(points, resolution, size)\n  {\n    if( size <= 0 )\n    {\n      throw new Error(\"size must be greater than zero\");\n    }\n    if( size < resolution || (size % resolution) !== 0)\n    {\n      throw new Error(\"resolution must be less than size and divide it evenly\");\n    }\n    let s = new Array(size / resolution).fill(0);\n    for( const p of points )\n    {\n      if( (p % resolution) !== 0)\n      {\n        throw new Error(\"Failed to represent point \" + p.toString() + \" at resolution \" + resolution.toString());\n      }\n      if (p >= size)\n      {\n        throw new Error(\"Failed to represent point \" + p.toString() + \" for invalid specified size \" + size.toString());\n      }\n      const arrayIndex = p / resolution;\n      s[arrayIndex] = 1;\n    }\n    return s;\n  }\n\n  format(formatResolution)\n  {\n    // formatResolution must cleanly divide for every hit & the length of the pattern\n\n    const totalLength = (this.resolution * this.rep.length);\n    const points = this.toPoints();\n    const rep = track.representPoints(points, formatResolution, totalLength);\n    if(!rep)\n    {\n      return null;\n    }\n    return new track(\n      rep,\n      formatResolution\n    );\n  }\n\n  toPoints()\n  {\n    let points = [];\n    for( const arrayIndex of Array(this.rep.length).keys() )\n    {\n      const indicator = this.rep[arrayIndex];\n      if(indicator)\n      {\n        points.push( this.resolution * arrayIndex )\n      }\n    }\n    return points;\n  }\n\n  static fromPositions(positions, size, resolution = null)\n  {\n    const resolutionToUse = resolution ?? calculateResolution( positions, size );\n    return new track( \n      track.representPoints(positions, resolutionToUse, size), \n      resolutionToUse\n    );\n  }\n}\n\nexport default track;","// h2.js\n\nimport track from \"./track\"\nimport xml2js from \"xml2js\";\nimport { calculateResolution } from \"./utilities\";\n\n// let's think about the data representation needed\n\nfunction calculatePatternResolution(pattern, size)\n{\n  const positions = Array.from(pattern.notes, note => note.position)\n  return calculateResolution(positions, size);\n}\n\nfunction parseHydrogenJs(result)\n{\n    // fixme:\n    // this parsing often assumes there's >=2 elements\n\n    // this \"zero\" here is presumably an artefact of xml --> json representation\n    const instrumentElements = result.song.instrumentList[0].instrument;\n\n    // instruments\n    // [  { id, name } ]\n    const instrumentArray = Array.from(\n      instrumentElements,\n      function(element){\n        return {\"id\" : parseInt(element.id), \"name\" : element.name, \"volume\" : parseFloat(element.volume), \"muted\" : element.isMuted[0] === \"true\", \"gain\" : parseFloat(element.gain)};\n      }\n    );\n\n    const patternElements = result.song.patternList[0].pattern;\n    // patterns\n    // [  { name, size, notes } ]\n    const patternArray = Array.from(\n      patternElements,\n      function(element){\n        const noteElements = element.noteList[0].note;\n        const patternSize = parseInt(element.size);\n        let notes = [];\n        if( noteElements )\n        {\n          // notes \n          // [ {position, instrument(id}]\n          notes = Array.from(\n            noteElements,\n            function(noteElement){\n              return {\"position\" : parseInt(noteElement.position), \"instrument\" : parseInt(noteElement.instrument)};\n            }\n          );\n\n          // hydrogen permits you to have notes that reach past the pattern size, \n          // they then get revealed when you extend the pattern, \n          // here's an easy point to get rid of them, we don't want them to factor into any calculations\n          notes = notes.filter( n => n.position < patternSize );\n        }\n        return {\n          \"size\" : patternSize, \n          \"name\" : element.name,\n          \"notes\" : notes\n        };\n      }\n    );\n\n    // transform pattern to a managable data\n    const patternsWithTracks = Array.from(\n      patternArray,\n      function(pattern)\n      { \n        const resolution = calculatePatternResolution(pattern, pattern.size);\n        let instrumentTracks = {};\n        for( const instrument of instrumentArray )\n        {\n          const relevantNotes = pattern.notes.filter( \n            note => (note.instrument === instrument.id)\n          );\n          const relevantHits = Array.from(\n            relevantNotes,\n            note => note.position\n          );\n          instrumentTracks[ instrument.id.toString() ] = track.fromPositions( relevantHits, pattern.size, resolution);\n        }\n        pattern.resolution = resolution;\n        pattern.instrumentTracks = instrumentTracks;\n        return pattern;\n      }\n    );\n\n    return {\n      \"instruments\" : instrumentArray,\n      \"patterns\" : patternsWithTracks\n    }\n}\n\nasync function parseHydrogenPromise(xmlString)\n{\n  let parser = new xml2js.Parser();\n\n  return parser.parseStringPromise(xmlString).then(parseHydrogenJs);\n}\n\nexport default { parseHydrogenPromise };","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport Divider from \"@material-ui/core/Divider\";\n\nimport notation from \"./notation\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction camelToReadable(s)\n{\n  const spacedString = s.replace(/([A-Z])/g, ' $1');\n  return spacedString[0].toUpperCase() + spacedString.slice(1);\n}\n\nfunction FormatSettings(props) {\n  const classes = useStyles();\n  // todo: change to multiple useState calls?\n\n  function stateToItem(value)\n  {\n    return value === \" \" ? \"space\" : value;\n  }\n\n  function itemToState(value)\n  {\n    return value === \"space\" ? \" \" : value;\n  }\n\n  const handleOptionChange = (event) => {\n    const updatedState = {...props.settings, [event.target.name]: itemToState(event.target.value)};\n    props.onChange(updatedState);\n  };\n\n  const handleCheckedChange = (event) => {\n    const updatedState = {...props.settings, [event.target.name]: event.target.checked};\n    props.onChange(updatedState);\n  };\n\n  function createOptionMenu(name, options)\n  {\n    const idString = \"form-control-\" + name + \"-id\";\n    return (\n      <FormControl variant=\"filled\" className={classes.formControl} key={idString} id={idString}>\n        <InputLabel id=\"settings-option-{name}\">{name}</InputLabel>\n        <Select\n          labelId={\"settings-option-\" + name + \"-labelID\"}\n          id={\"settings-option-\" + name + \"-id\"}\n          value={stateToItem(props.settings[name])}\n          name={name}\n          onChange={handleOptionChange}\n        >\n          {options.map((op) => <MenuItem key={\"settings-menu-item-\" + name + \"-\" + op} value={stateToItem(op)}>{stateToItem(op)}</MenuItem>)}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  function createBoolControl(name)\n  {\n    return (\n      <FormControlLabel\n        control={<Switch checked={props.settings[name]} onChange={handleCheckedChange} name={name} />}\n        label={camelToReadable(name)}\n        key={\"switch-\"+name}\n      />\n    );\n  };\n\n  return (\n    <FormGroup className={classes.root}>\n      {notation.FORMAT_CONFIG_STRINGS.map( op => createOptionMenu( op[0], op[1] ) ).reduce((prev, curr) => [prev, <Divider/>, curr])}\n      <Divider/>\n      {notation.FORMAT_CONFIG_BOOLS.map( op => createBoolControl( op )).reduce((prev, curr) => [prev, <Divider/>, curr]) }\n    </FormGroup>\n  );\n}\n\nconst DefaultSettings = notation.DEFAULT_FORMAT_CONFIG; \n\n\nexport { FormatSettings, DefaultSettings }\nexport default FormatSettings;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n// table\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  }\n}));\n\nconst ThinFormControlLabel = withStyles({\n  root: {\n    marginLeft: 0,\n    marginRight: 0\n  }\n})(FormControlLabel);\n\nconst InlinableIconButton = withStyles({\n  root: {\n    padding: 2\n  }\n})(IconButton);\n\nfunction InstrumentConfig(props) {\n  const classes = useStyles();\n\n  const handleChange = (x,y, event) => {\n    const instrumentID = props.instrumentIndex[x].id;\n    const oldInstrumentIndex = props.instruments.findIndex( instrument => instrumentID in instrument[1]);\n    const dstInstrumentIndex = y;\n    if( oldInstrumentIndex === dstInstrumentIndex )\n    {\n      return;\n    }\n    const oldInstrument = props.instruments[oldInstrumentIndex];\n    let replacedSrcInstrument = [\n      \"\",\n      {}\n    ];\n    if( oldInstrument != null )\n    {\n      replacedSrcInstrument[0] = oldInstrument[0];\n      for( const key of Object.keys(oldInstrument[1]) )\n      {\n        if( key !== instrumentID.toString() )\n        {\n          replacedSrcInstrument[1][key] = oldInstrument[1][key];\n        }\n      }\n    }\n    let dstInstrument = [\n      props.instruments[dstInstrumentIndex][0],\n      Object.assign({}, props.instruments[dstInstrumentIndex][1] )\n    ];\n    if(oldInstrument != null )\n    {\n      dstInstrument[1][instrumentID.toString()] = oldInstrument[1][instrumentID];\n    }\n    else\n    {\n      dstInstrument[1][instrumentID.toString()] = \"X\";\n    }\n\n    let replacedInstruments = [];\n\n    for(let instrumentIndex = 0; instrumentIndex < props.instruments.length; ++instrumentIndex)\n    {\n      if( instrumentIndex === oldInstrumentIndex )\n      {\n        replacedInstruments.push( replacedSrcInstrument );\n      }\n      else if( instrumentIndex === dstInstrumentIndex )\n      {\n        replacedInstruments.push( dstInstrument )\n      }\n      else\n      {\n        replacedInstruments.push( props.instruments[instrumentIndex] );\n      }\n    }\n    props.onChange(replacedInstruments);\n  };\n\n  const removeInstrument = (y) => \n  {\n    let replacedInstruments = props.instruments.slice(0,y).concat(props.instruments.slice(y+1));\n    props.onChange(replacedInstruments);\n  };\n\n  const [renamingInstrument, setRenamingInstrument] = React.useState(-1);\n  let [nameState, setNameState] = React.useState(\"\");\n\n  const createCell = (x,y) =>\n  {\n      return ( \n        <TableCell\n          align=\"center\"\n        >\n        <ThinFormControlLabel\n          control={<Checkbox checked={props.instrumentMask[x] === y} onChange={(e) => handleChange(x,y,e)} name={x + \",\" + y.toString()} />}\n        />\n        </TableCell>\n      );\n  }\n\n  const createMatchingRow = (y) =>\n  {\n    return (\n      <TableRow>\n        <TableCell component=\"th\" scope=\"row\">\n          <Typography>{props.instruments[y][0]}</Typography>\n          <InlinableIconButton onClick={(e)=>setRenamingInstrument(y)}><EditIcon fontSize=\"small\"/></InlinableIconButton>\n          <InlinableIconButton onClick={(e)=>{removeInstrument(y);}}><ClearIcon fontSize=\"small\"/></InlinableIconButton>\n        </TableCell>\n        {[...Array(props.instrumentIndex.length).keys()].map(x=>createCell(x,y))}\n      </TableRow>\n    );\n  };\n\n  const createEditRow = () =>\n  {\n    return (\n      <TableRow>\n        <TableCell component=\"th\" scope=\"row\"><IconButton onClick={(e)=>setRenamingInstrument(props.instruments.length)} aria-label=\"add\"><AddBoxIcon/></IconButton></TableCell>\n      </TableRow>\n    );\n  };\n\n  const renameInstrument = (e)  => \n  {\n    if( renamingInstrument === props.instruments.length )\n    {\n      const extraInstrument = [ nameState, {} ];\n      let replacedInstruments = Array.from( props.instruments );\n      replacedInstruments.push(extraInstrument);\n      props.onChange(replacedInstruments);\n    }\n    else\n    {\n      let replacedInstruments = Array.from( props.instruments );\n      replacedInstruments[renamingInstrument][0] = nameState;\n      props.onChange(replacedInstruments);\n    }\n    setRenamingInstrument(-1);\n    setNameState(\"\");\n  };\n\n  // todo: The text field is very slow\n  // that could be because the dialog and the table content are all one component\n  // I should try and fix that first\n  // otherwise, it's just that shoving react in the middle is too slow\n\n  const [editSymbol, setEditSymbol] = React.useState(-1);\n  let [editSymbolState, setEditSymbolState] = React.useState(\"\");\n\n  const startEditingSymbol = (x) =>\n  {\n    const instrumentID = props.instrumentIndex[x].id;\n    const instrumentIndex = props.instruments.findIndex( instrument => instrumentID in instrument[1]);\n    const currentSymbol = props.instruments[instrumentIndex][1][instrumentID];\n    setEditSymbolState(currentSymbol);\n    setEditSymbol(x);\n  };\n\n  const changeSymbol = (e) =>\n  {\n    const instrumentID = props.instrumentIndex[editSymbol].id;\n    const instrumentIndex = props.instruments.findIndex( instrument => instrumentID in instrument[1]);\n    let replacedInstruments = Array.from(props.instruments);\n    replacedInstruments[instrumentIndex][1][instrumentID] = editSymbolState;\n    props.onChange(replacedInstruments);\n    setEditSymbol(-1);\n  };\n\n  return (\n    <React.Fragment>\n      <Dialog open={renamingInstrument >= 0} onClose={(e)=>setRenamingInstrument(-1)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\"></DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter instrument name\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            fullWidth\n            value={nameState}\n            onChange={(e)=>setNameState(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={(e)=>setRenamingInstrument(-1)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={renameInstrument} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={editSymbol >= 0} onClose={(e)=>setEditSymbol(-1)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\"></DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter notation symbol\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            fullWidth\n            value={editSymbolState}\n            onChange={(e)=>setEditSymbolState(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={(e)=>setEditSymbol(-1)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={changeSymbol} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <TableContainer>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell> Instrument </TableCell>\n              {[...Array(props.instrumentIndex.length).keys()].map(x=><TableCell><Typography>{props.instrumentIndex[x].name}</Typography><InlinableIconButton onClick={(e)=>startEditingSymbol(x)} ><EditIcon fontSize=\"small\"/></InlinableIconButton></TableCell>)}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {[...Array(props.instruments.length).keys()].map(y=>createMatchingRow(y))}\n            {createEditRow()}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </React.Fragment>\n  );\n}\n\nfunction createInstrumentMask(instrumentIndex, instruments)\n{\n  let instrumentMask = Array(instrumentIndex.length);\n  for( let baseInstrumentIndex = 0; baseInstrumentIndex < instrumentIndex.length; ++baseInstrumentIndex )\n  {\n    const baseInstrumentId = instrumentIndex[baseInstrumentIndex].id;\n    for( let targetInstrumentIndex = 0; targetInstrumentIndex < instruments.length; ++targetInstrumentIndex)\n    {\n      const target = instruments[targetInstrumentIndex];\n      if(baseInstrumentId.toString() in target[1])\n      {\n        instrumentMask[baseInstrumentIndex] = targetInstrumentIndex;\n      }\n    }\n  }\n  return instrumentMask;\n}\n\nexport { createInstrumentMask, InstrumentConfig };","const DEFAULT_INSTRUMENT_SYMBOLS = {\n  \"Djembe Slap\" : \"S\",\n  \"Djembe Tone\" : \"t\",\n  \"Djembe Bass\" : \"O\",\n  \"Snare Ghost\" : \"-\",\n  \"Snare Accent\" : \"X\",\n  \"Shaker Ghost\" : \"x\",\n  \"Shaker Accent\" : \"X\",\n  \"Click\" : \"X\",\n  \"Bass\" : \"O\",\n  \"Tom\" : \"O\",\n  \"Default\" : \"X\"\n};\n\nfunction normalizeInstrumentsForFiguring(instruments)\n{\n  let n = [];\n  for(const inst of instruments)\n  {\n    let nInst = Object.assign({}, inst);\n    // for some reason these instruments are one-size arrays, and one id ... the track id from hydrogen\n    // this should be fixed, this doesn't make sense\n    nInst.name = nInst.name[0].toLowerCase();\n    n.push( nInst );\n  }\n  return n;\n}\n\nfunction figureDjembes(instrumentsRaw, symbolConfig)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  const djembeTracks = instruments.filter( (inst) => inst.name.includes(\"djembe\") );\n  if(djembeTracks.length === 0)\n  {\n    return [];\n  }\n  else if(djembeTracks.length <= 3)\n  {\n    // let's lazily assume we have a slap, tone, bass\n    const slapArray = Array.from( djembeTracks, (inst) => inst.name.includes(\"slap\") );\n    const toneArray = Array.from( djembeTracks, (inst) => inst.name.includes(\"tone\") );\n    const bassArray = Array.from( djembeTracks, (inst) => inst.name.includes(\"bass\") );\n    for( let i = 0; i < djembeTracks.length; ++i )\n    {\n      let parityCheck = slapArray[i] + toneArray[i] + bassArray[i];\n      // failed to figure out how djembes work return empty array\n      if(parityCheck !== 1)\n      {\n        return [];\n      }\n    }\n    let djembeMapping = {};\n    for( let i = 0; i < djembeTracks.length; ++i )\n    {\n      if( slapArray[i] )\n      {\n        djembeMapping[ djembeTracks[i].id.toString() ] = symbolConfig[\"Djembe Slap\"];\n      }\n      else if( toneArray[i] )\n      {\n        djembeMapping[ djembeTracks[i].id.toString() ] = symbolConfig[\"Djembe Tone\"];\n      }\n      else if( bassArray[i] )\n      {\n        djembeMapping[ djembeTracks[i].id.toString() ] = symbolConfig[\"Djembe Bass\"];\n      }\n    }\n    return [ [ \"Djembe\", djembeMapping ] ];\n  }\n  else\n  {\n    // TODO: support more than one djembe\n    return []\n  }\n}\n\n// used by snare/shaker\nfunction manageAccentOrGhost(instrumentTracks, instrumentName, accentSymbol, ghostSymbol)\n{\n  let outputInstruments = [];\n  if(instrumentTracks.length === 2)\n  {\n    const t0 = instrumentTracks[0];\n    const t1 = instrumentTracks[1];\n    // attempt to determine ghost/accent\n    const zeroLouder = t0.volume > t1.volume || (t0.volume === t1.volume && t0.gain > t1.gain);\n    let mapping = {};\n    mapping[ t0.id.toString() ] = zeroLouder ? accentSymbol : ghostSymbol;\n    mapping[ t1.id.toString() ] = zeroLouder ? ghostSymbol : accentSymbol;\n    outputInstruments.push([instrumentName, mapping] );  \n  }\n  else // if 1 it must be an accent, if >= 3 ... I don't want to try and assign ghosts/accents\n  {\n    // I don't want to support ghost/accent here right now\n    for( const track of instrumentTracks )\n    {\n      let mapping = {};\n      mapping[ track.id.toString() ] = accentSymbol;\n      outputInstruments.push([instrumentName, mapping] );  \n    }\n  }\n  return outputInstruments;\n\n}\n\nfunction figureShakers(instrumentsRaw, symbolConfig)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  // todo: support common alternative shakers? Tambourine?\n  const shakerTracks = instruments.filter( (inst) => ( inst.name.includes(\"shaker\") ) );\n  return manageAccentOrGhost( \n    shakerTracks, \n    \"Shaker\", \n    symbolConfig[\"Shaker Accent\"],\n    symbolConfig[\"Shaker Ghost\"]\n  );\n}\n\nfunction figureSnares(instrumentsRaw, symbolConfig)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  const snareTracks = instruments.filter( (inst) => ( inst.name.includes(\"snare\") ) );\n  // todo: we currently assume 2 snares is accent/ghost ... but I think it's relatively\n  // common to be 2 snare parts too, I think the algorithm here is check patterns to\n  // see if they overlap ... if the \"ghosts\" overlap the \"hits\" sometimes, assume 2 parts\n  return manageAccentOrGhost( \n    snareTracks, \n    \"Snare\", \n    symbolConfig[\"Snare Accent\"],\n    symbolConfig[\"Snare Ghost\"]\n  );\n}\n\n\nfunction activeInstruments(patterns)\n{\n  let nonTrivialInstruments = new Set();\n  for( const p of patterns )\n  {\n    for(const [instrumentID, part] of Object.entries(p.instrumentTracks))\n    {\n      if( !part.empty() )\n      {\n        nonTrivialInstruments.add(parseInt(instrumentID));\n      }\n    }\n  }\n  return nonTrivialInstruments;\n}\n\nfunction activeInstrumentation(instrumentIndex, patterns)\n{\n  const active = activeInstruments(patterns);\n  let nonTrivialInstruments = [];\n  for( const inst of instrumentIndex)\n  {\n    if( active.has(inst.id) )\n    {\n      nonTrivialInstruments.push( inst );\n    }\n  }\n  return nonTrivialInstruments;\n}\n\nfunction figureClickyInstruments(instrumentsRaw, symbolConfig, patterns)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  const worthwhileInstruments = activeInstruments(patterns);\n  const relevantTracks = instruments.filter( (inst) => ( worthwhileInstruments.has(inst.id) &&\n    !inst.name.includes(\"djembe\") &&\n    ( inst.name.includes(\"click\") || \n    inst.name.includes(\"stick\") || \n    inst.name.includes(\"tom\") || \n    inst.name.includes(\"bass\") ||\n    inst.name.includes(\"kick\") )\n  ) );\n\n  const trackIsClick = Array.from(\n    relevantTracks,\n    (t) => t.name.includes(\"click\") || t.name.includes(\"stick\")\n  );\n  // we rioritise the early tracks\n  // and hope for the best\n\n  let collated = [];\n  for( let candidate = 0; candidate < Math.floor(relevantTracks.length/2); ++candidate )\n  {\n    if( trackIsClick[candidate*2] !== trackIsClick[candidate*2+1] )\n    {\n      const clickTrack = trackIsClick[candidate*2] ? relevantTracks[candidate*2] : relevantTracks[candidate*2+1];\n      const hitTrack = trackIsClick[candidate*2] ? relevantTracks[candidate*2+1] : relevantTracks[candidate*2];\n      const instrumentIsTom = hitTrack.name.includes(\"tom\");\n      const instrumentName = instrumentIsTom ? \"Tom\" : \"Bass\";\n      let mapping = {};\n      mapping[hitTrack.id.toString()] = symbolConfig[instrumentName];\n      mapping[clickTrack.id.toString()] = symbolConfig[\"Click\"];\n      collated.push([instrumentName, mapping] );  \n    }\n  }\n\n  // If there's a remainder instrument and there's no click\n  if( ((relevantTracks.length % 2 ) !== 0) && !trackIsClick[ relevantTracks.length - 1 ] )\n  {\n    const lastTrack = relevantTracks[relevantTracks.length - 1];\n    const instrumentName = lastTrack.name.includes(\"tom\") ? \"Tom\" : \"Bass\";\n    let mapping = {};\n    mapping[lastTrack.id.toString()] = symbolConfig[instrumentName];\n    collated.push([instrumentName, mapping] );  \n  }\n\n  return collated;\n}\n\nfunction figureInstruments(instrumentsRaw, symbolConfig, patterns)\n{\n  let output = [];\n  output = output.concat( figureClickyInstruments( instrumentsRaw, symbolConfig, patterns ) );\n  output = output.concat( figureDjembes( instrumentsRaw, symbolConfig ) );\n  output = output.concat( figureSnares( instrumentsRaw, symbolConfig ) );\n  output = output.concat( figureShakers( instrumentsRaw, symbolConfig ) );\n\n  // we ignore track used by multiple instruments\n\n  // but attempt to cover \"instrument not recognised anywhere\"\n\n  const worthwhileInstruments = activeInstruments(patterns);\n\n  for(const inst of instrumentsRaw)\n  {\n    if( !worthwhileInstruments.has(inst.id) )\n    {\n      continue;\n    }\n    let instrumentUsed = false;\n    for( const op of output)\n    {\n      if( inst.id.toString() in op[1] ) \n      {\n        instrumentUsed = true;\n      }\n    }\n    if(instrumentUsed === false)\n    {\n      let mapping = {};\n      mapping[ inst.id.toString() ] = symbolConfig[\"Default\"];\n      output.push( [inst.name[0], mapping] );\n    }\n  }\n  \n  return output; \n}\n\nexport { activeInstrumentation, DEFAULT_INSTRUMENT_SYMBOLS, figureClickyInstruments, figureDjembes, figureShakers, figureSnares, figureInstruments };","import React from 'react';\nimport clsx from 'clsx';\nimport FileImport from \"./FileImport\";\nimport Pattern from \"./Pattern\";\nimport h2 from './h2';\nimport './App.css';\n\nimport { Alert } from '@material-ui/lab';\n\n// define mui theme, including responsiveFont\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// drawer\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n// notationSettings\n\nimport {FormatSettings, DefaultSettings} from \"./formatSettings\";\nimport {createInstrumentMask, InstrumentConfig} from \"./instrumentConfig\";\nimport { activeInstrumentation, figureInstruments, DEFAULT_INSTRUMENT_SYMBOLS } from \"./instrumentation\";\n\nimport Grid from '@material-ui/core/Grid';\n\n// load static data\nimport kuva from \"./kuva.json\";\nimport track from \"./track\";\n\n// mui theme config\nlet theme = createMuiTheme( { \n  palette: { \n    type: 'dark',\n    primary: { main: '#36d9be' },\n    secondary: { main: '#f50057' }\n   } \n} );\n\nclass App extends React.Component\n{\n  constructor(props) {\n    super(props);\n    this.state = {\n      instruments : null,\n      instrumentIndex : null,\n      instrumentMask : null,\n      patterns : null,\n      selectedPattern : null,\n      loadedFile : null,\n      settingsOpen : false,\n      formatSettings : Object.assign({}, DefaultSettings)\n    };\n  }\n\n  handleFileImport(e)\n  {\n    // e = { file : , content : }\n    h2.parseHydrogenPromise(e.content).then(h => {\n      const assessedInstruments = figureInstruments(h.instruments, DEFAULT_INSTRUMENT_SYMBOLS, h.patterns);\n      const instrumentIndex = activeInstrumentation(h.instruments, h.patterns);\n      this.setState({\n        instrumentIndex : instrumentIndex,\n        instrumentMask : createInstrumentMask(instrumentIndex, assessedInstruments),\n        instruments : assessedInstruments,\n        patterns : h.patterns,\n        selectedPattern : h.patterns.length === 0 ? null : 0,\n        loadedFile : e.file.name\n      });\n    });\n  }\n\n  selectPattern(patternIndex)\n  {\n    this.setState( { selectedPattern: patternIndex } );\n  }\n\n\n  // todo: this is a separate component!\n  renderPattern(pattern, settings)\n  {\n    const changeInstrumentsCallback = (instruments) => {\n      this.setState( {\n        instruments : instruments,\n        instrumentMask : createInstrumentMask(this.state.instrumentIndex, instruments)\n      } );\n    }\n    return (\n      <React.Fragment>\n        <Pattern \n          instruments={this.state.instruments} \n          tracks={pattern.instrumentTracks}\n          config={this.state.formatSettings}\n        />\n        <Grid container>\n        <Grid item xs={2} />\n        <Grid item xs={8}>\n          <InstrumentConfig\n            instruments={this.state.instruments}\n            instrumentIndex={this.state.instrumentIndex}\n            instrumentMask={this.state.instrumentMask}\n            onChange={changeInstrumentsCallback}\n          />\n        </Grid>\n        <Grid item xs={2} />\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n\n\n  loadExample()\n  {\n    const createObjects = (state) => \n    {\n      // the instruments currently work as simple objects\n      // we need to create tracks!\n      for( let pattern of state.patterns )\n      {\n        let replacedTracks = {};\n        // todo: find a more compact way of doing this\n        for( const [id, trackData] of Object.entries(pattern.instrumentTracks) )\n        {\n          replacedTracks[id] = new track( trackData.rep, trackData.resolution );\n        }\n        pattern.instrumentTracks = replacedTracks;\n      }\n      return state;\n    }\n    const k = createObjects(kuva);\n    const assessedInstruments = figureInstruments(k.instruments, DEFAULT_INSTRUMENT_SYMBOLS, k.patterns);\n    const instrumentIndex = activeInstrumentation(k.instruments, k.patterns);\n    this.setState({\n      instrumentIndex : instrumentIndex,\n      instrumentMask : createInstrumentMask(instrumentIndex, assessedInstruments),\n      instruments : assessedInstruments,\n      patterns : k.patterns,\n      selectedPattern : k.patterns.length === 0 ? null : 0,\n      loadedFile : \"kuva.example\"\n    });\n  }\n\n  // todo: this will go away eventually, once I choose how to load a file\n  // (though it should obviously be another component anyway)\n  renderMainContent()\n  {\n    if(this.state.patterns == null || this.state.patterns.length === 0)\n    {\n      const showAlert = this.state.patterns != null && this.state.patterns.length === 0;\n      const optionalAlert = showAlert ? ( <Alert severity=\"error\">{this.state.loadedFile} contained no patterns! Try another.</Alert> )\n                                      : \"\";\n      return (\n        <div>\n          <h2>tabit</h2>\n          <p>I read .h2songs and write tab</p>\n          <Button variant=\"contained\" onClick={this.loadExample.bind(this)}>See an example</Button>\n          <p>Or import your own</p>\n          <FileImport\n            onImport={this.handleFileImport.bind(this)}\n            />\n            {optionalAlert}\n        </div>\n      );      \n    }\n    else\n    {\n      let patternContent = null;\n      // default title \n      if( this.state.selectedPattern == null )\n      {\n        patternContent = [];\n        for( const pattern of this.state.patterns ) {\n          patternContent.push( this.renderPattern(pattern) );\n        }\n      }\n      else\n      {\n        const patternToRender = this.state.patterns[this.state.selectedPattern];\n        patternContent = this.renderPattern(patternToRender);\n      }\n       \n      const handleDrawerOpen = () => {\n        this.setState( {settingsOpen : true} );\n      };\n\n      const handleDrawerClose = () => {\n        this.setState( {settingsOpen : false} );\n      };\n\n      const settingsChangeCallback = (config) => {\n        this.setState( { formatSettings: config } );\n      };\n\n      const classes = this.props;\n\n      // ugh 95%, seems flex doesn't solve everything\n      return (\n        <React.Fragment>\n          <div style={{display:\"flex\", width: \"95%\"}}> \n            <div className=\"content-title\" style={{flexGrow:1}}>\n            </div>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"end\"\n              onClick={handleDrawerOpen}\n              className={clsx(this.state.settingsOpen && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n          </div>\n          {patternContent}\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={this.state.settingsOpen}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n              <ChevronRightIcon />\n          </IconButton>\n        </div>\n        <FormatSettings onChange={settingsChangeCallback} settings={this.state.formatSettings}/>  \n        </Drawer>\n        </React.Fragment>\n      );\n    }\n  }\n\n  render() {\n    const classes = this.props;\n    const patternsReady = this.state.patterns != null;\n    const mainContent = this.renderMainContent();\n    return (\n      <div className=\"App\">\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            open={patternsReady}\n          >\n            <div className={classes.drawerContainer}>\n              <List>\n                {(this.state.patterns ?? []).map( (pattern, index) => (\n                  <ListItem button key={\"drawer-pattern\" + index.toString()} onClick={() => this.selectPattern(index)}>\n                      <ListItemText primary={pattern.name} />\n                  </ListItem>\n                ))}\n              </List>\n            </div>\n          </Drawer>\n          {mainContent}\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}