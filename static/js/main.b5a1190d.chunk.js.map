{"version":3,"sources":["formatSettings.js","App.js","FileImport.js","Pattern.js","h2.js","serviceWorker.js","index.js","instrumentation.js","notation.js","instrumentConfig.js","track.js","utilities.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","camelToReadable","s","spacedString","replace","toUpperCase","slice","FormatSettings","props","classes","stateToItem","value","handleOptionChange","event","updatedState","settings","target","name","onChange","handleCheckedChange","checked","className","root","notation","FORMAT_CONFIG_STRINGS","map","op","options","idString","variant","key","id","labelId","createOptionMenu","reduce","prev","curr","FORMAT_CONFIG_BOOLS","control","label","DefaultSettings","DEFAULT_FORMAT_CONFIG","createMuiTheme","palette","type","primary","main","secondary","App","state","instruments","instrumentIndex","instrumentMask","patterns","selectedPattern","loadedFile","settingsOpen","patternsOpen","formatSettings","Object","assign","e","h2","parseHydrogenPromise","content","then","h","assessedInstruments","figureInstruments","DEFAULT_INSTRUMENT_SYMBOLS","activeInstrumentation","setState","createInstrumentMask","length","file","patternIndex","this","pattern","Fragment","tracks","instrumentTracks","config","container","item","xs","k","replacedTracks","entries","trackData","track","rep","resolution","createObjects","kuva","optionalAlert","severity","onClick","loadExample","bind","onImport","handleFileImport","patternContent","push","renderPattern","patternToRender","handleDrawerOpen","handleDrawerClose","handlePatternsClose","handlePatternsOpen","iOS","process","browser","test","navigator","userAgent","style","display","width","color","aria-label","edge","clsx","hide","flexGrow","disableBackdropTransition","disableDiscovery","drawer","open","onOpen","drawerHeader","drawerContainer","index","button","toString","selectPattern","anchor","onClose","paper","drawerPaper","mainContent","renderMainContent","React","Component","FileImport","fileObject","files","reader","FileReader","onload","loadEvent","result","readAsText","Pattern","configOverride","page","instrumentName","instrument","notationString","fromInstrumentAndTrack","split","x","formatText","withStyles","fontFamily","textAlign","whiteSpace","parseHydrogenJs","instrumentElements","song","instrumentList","instrumentArray","Array","from","element","instrumentComponent","inst","parseInt","parseFloat","volume","isMuted","gain","drumkit","layer","filename","patternElements","patternList","patternArray","noteElements","noteList","note","patternSize","size","notes","noteElement","position","filter","n","patternsWithTracks","positions","calculateResolution","calculatePatternResolution","relevantNotes","relevantHits","fromPositions","xmlString","a","parser","xml2js","Parser","parseStringPromise","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message","normalizeInstrumentsForFiguring","nInst","toLowerCase","manageAccentOrGhost","accentSymbol","ghostSymbol","outputInstruments","t0","t1","zeroLouder","mapping","activeInstruments","nonTrivialInstruments","Set","p","instrumentID","empty","add","active","has","instrumentsRaw","symbolConfig","output","concat","worthwhileInstruments","relevantTracks","includes","trackIsClick","t","collated","candidate","Math","floor","clickTrack","hitTrack","lastTrack","figureClickyInstruments","djembeTracks","slapArray","toneArray","bassArray","i","djembeMapping","figureDjembes","figureSnares","figureShakers","instrumentUsed","patternResolution","beatResolution","Error","lineResolution","str","chunkSize","RegExp","validateConfig","lineLength","min","beatCount","ceil","numberMarkerArray","numberRestMark","beat","join","line","beatChunkSize","lineWithBeats","showBeatMark","chunkString","beatMark","lineMark","trackDict","formatConfig","keys","propName","hasOwnProperty","values","notationLength","fill","restMark","charIndex","trackID","trackSymbol","trackInstance","patternString","lineArray","formattedLineArray","showBeatNumbers","formatLineWithMarkers","createNumberMarker","ThinFormControlLabel","marginLeft","marginRight","FormControlLabel","InlinableIconButton","padding","IconButton","CenterTableCell","TableCell","InstrumentConfig","useState","renamingInstrument","setRenamingInstrument","nameState","setNameState","createCell","y","align","oldInstrumentIndex","findIndex","dstInstrumentIndex","oldInstrument","replacedSrcInstrument","dstInstrument","replacedInstruments","handleChange","createMatchingRow","component","scope","fontSize","removeInstrument","editSymbol","setEditSymbol","editSymbolState","setEditSymbolState","aria-labelledby","autoFocus","fullWidth","trim","extraInstrument","updatedSymbol","alert","table","currentSymbol","startEditingSymbol","baseInstrumentIndex","baseInstrumentId","targetInstrumentIndex","b","count","other","_sumOverlapsOfArrays","hcf","max","findHCF","formatResolution","totalLength","points","toPoints","representPoints","arrayIndex","resolutionToUse","implicitPositions","allNotesPass"],"mappings":"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","file":"static/js/main.b5a1190d.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport Divider from \"@material-ui/core/Divider\";\n\nimport notation from \"./notation\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction camelToReadable(s)\n{\n  const spacedString = s.replace(/([A-Z])/g, ' $1');\n  return spacedString[0].toUpperCase() + spacedString.slice(1);\n}\n\nfunction FormatSettings(props) {\n  const classes = useStyles();\n  // todo: change to multiple useState calls?\n\n  function stateToItem(value)\n  {\n    return value === \" \" ? \"space\" : value;\n  }\n\n  function itemToState(value)\n  {\n    return value === \"space\" ? \" \" : value;\n  }\n\n  const handleOptionChange = (event) => {\n    const updatedState = {...props.settings, [event.target.name]: itemToState(event.target.value)};\n    props.onChange(updatedState);\n  };\n\n  const handleCheckedChange = (event) => {\n    const updatedState = {...props.settings, [event.target.name]: event.target.checked};\n    props.onChange(updatedState);\n  };\n\n  function createOptionMenu(name, options)\n  {\n    const idString = \"form-control-\" + name + \"-id\";\n    return (\n      <FormControl variant=\"filled\" className={classes.formControl} key={idString} id={idString}>\n        <InputLabel id=\"settings-option-{name}\">{name}</InputLabel>\n        <Select\n          labelId={\"settings-option-\" + name + \"-labelID\"}\n          id={\"settings-option-\" + name + \"-id\"}\n          value={stateToItem(props.settings[name])}\n          name={name}\n          onChange={handleOptionChange}\n        >\n          {options.map((op) => <MenuItem key={\"settings-menu-item-\" + name + \"-\" + op} value={stateToItem(op)}>{stateToItem(op)}</MenuItem>)}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  function createBoolControl(name)\n  {\n    return (\n      <FormControlLabel\n        control={<Switch checked={props.settings[name]} onChange={handleCheckedChange} name={name} />}\n        label={camelToReadable(name)}\n        key={\"switch-\"+name}\n      />\n    );\n  };\n\n  return (\n    <FormGroup className={classes.root}>\n      {notation.FORMAT_CONFIG_STRINGS.map( op => createOptionMenu( op[0], op[1] ) ).reduce((prev, curr) => [prev, <Divider/>, curr])}\n      <Divider/>\n      {notation.FORMAT_CONFIG_BOOLS.map( op => createBoolControl( op )).reduce((prev, curr) => [prev, <Divider/>, curr]) }\n    </FormGroup>\n  );\n}\n\nconst DefaultSettings = notation.DEFAULT_FORMAT_CONFIG; \n\n\nexport { FormatSettings, DefaultSettings }\nexport default FormatSettings;","import React from 'react';\nimport clsx from 'clsx';\nimport FileImport from \"./FileImport\";\nimport Pattern from \"./Pattern\";\nimport h2 from './h2';\nimport './App.css';\n\nimport { Alert } from '@material-ui/lab';\n\n// define mui theme, including responsiveFont\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n// drawer\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport Divider from \"@material-ui/core/Divider\";\n\n// notationSettings\n\nimport {FormatSettings, DefaultSettings} from \"./formatSettings\";\nimport {createInstrumentMask, InstrumentConfig} from \"./instrumentConfig\";\nimport { activeInstrumentation, figureInstruments, DEFAULT_INSTRUMENT_SYMBOLS } from \"./instrumentation\";\n\nimport Grid from '@material-ui/core/Grid';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\n// load static data\nimport kuva from \"./kuva.json\";\nimport track from \"./track\";\n\n// mui theme config\nlet theme = createMuiTheme( { \n  palette: { \n    type: 'dark',\n    primary: { main: '#36d9be' },\n    secondary: { main: '#f50057' }\n   } \n} );\n\nclass App extends React.Component\n{\n  constructor(props) {\n    super(props);\n    this.state = {\n      instruments : null,\n      instrumentIndex : null,\n      instrumentMask : null,\n      patterns : null,\n      selectedPattern : null,\n      loadedFile : null,\n      settingsOpen : false,\n      patternsOpen : false,\n      formatSettings : Object.assign({}, DefaultSettings)\n    };\n  }\n\n  handleFileImport(e)\n  {\n    // e = { file : , content : }\n    h2.parseHydrogenPromise(e.content).then(h => {\n      const assessedInstruments = figureInstruments(h.instruments, DEFAULT_INSTRUMENT_SYMBOLS, h.patterns);\n      const instrumentIndex = activeInstrumentation(h.instruments, h.patterns);\n      this.setState({\n        instrumentIndex : instrumentIndex,\n        instrumentMask : createInstrumentMask(instrumentIndex, assessedInstruments),\n        instruments : assessedInstruments,\n        patterns : h.patterns,\n        selectedPattern : h.patterns.length === 0 ? null : 0,\n        loadedFile : e.file.name,\n        patternsOpen : true\n      });\n    });\n  }\n\n  selectPattern(patternIndex)\n  {\n    this.setState( { selectedPattern: patternIndex } );\n  }\n\n\n  // todo: this is a separate component!\n  renderPattern(pattern, settings)\n  {\n    const changeInstrumentsCallback = (instruments) => {\n      this.setState( {\n        instruments : instruments,\n        instrumentMask : createInstrumentMask(this.state.instrumentIndex, instruments)\n      } );\n    }\n    return (\n      <React.Fragment>\n        <Pattern \n          instruments={this.state.instruments} \n          tracks={pattern.instrumentTracks}\n          config={this.state.formatSettings}\n        />\n        <Grid container>\n        <Grid item xs={2} />\n        <Grid item xs={8}>\n          <InstrumentConfig\n            instruments={this.state.instruments}\n            instrumentIndex={this.state.instrumentIndex}\n            instrumentMask={this.state.instrumentMask}\n            onChange={changeInstrumentsCallback}\n          />\n        </Grid>\n        <Grid item xs={2} />\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n\n\n  loadExample()\n  {\n    const createObjects = (state) => \n    {\n      // the instruments currently work as simple objects\n      // we need to create tracks!\n      for( let pattern of state.patterns )\n      {\n        let replacedTracks = {};\n        // todo: find a more compact way of doing this\n        for( const [id, trackData] of Object.entries(pattern.instrumentTracks) )\n        {\n          replacedTracks[id] = new track( trackData.rep, trackData.resolution );\n        }\n        pattern.instrumentTracks = replacedTracks;\n      }\n      return state;\n    }\n    const k = createObjects(kuva);\n    const assessedInstruments = figureInstruments(k.instruments, DEFAULT_INSTRUMENT_SYMBOLS, k.patterns);\n    const instrumentIndex = activeInstrumentation(k.instruments, k.patterns);\n    this.setState({\n      instrumentIndex : instrumentIndex,\n      instrumentMask : createInstrumentMask(instrumentIndex, assessedInstruments),\n      instruments : assessedInstruments,\n      patterns : k.patterns,\n      selectedPattern : k.patterns.length === 0 ? null : 0,\n      loadedFile : \"kuva.example\",\n      patternsOpen : true\n    });\n  }\n\n  // todo: this will go away eventually, once I choose how to load a file\n  // (though it should obviously be another component anyway)\n  renderMainContent()\n  {\n    if(this.state.patterns == null || this.state.patterns.length === 0)\n    {\n      const showAlert = this.state.patterns != null && this.state.patterns.length === 0;\n      const optionalAlert = showAlert ? ( <Alert severity=\"error\">{this.state.loadedFile} contained no patterns! Try another.</Alert> )\n                                      : \"\";\n      return (\n        <div>\n          <h2>tabit</h2>\n          <p>I read .h2songs and write tab</p>\n          <Button variant=\"contained\" onClick={this.loadExample.bind(this)}>See an example</Button>\n          <p>Or import your own</p>\n          <FileImport\n            onImport={this.handleFileImport.bind(this)}\n            />\n            {optionalAlert}\n        </div>\n      );      \n    }\n    else\n    {\n      let patternContent = null;\n      // default title \n      if( this.state.selectedPattern == null )\n      {\n        patternContent = [];\n        for( const pattern of this.state.patterns ) {\n          patternContent.push( this.renderPattern(pattern) );\n        }\n      }\n      else\n      {\n        const patternToRender = this.state.patterns[this.state.selectedPattern];\n        patternContent = this.renderPattern(patternToRender);\n      }\n       \n      const handleDrawerOpen = () => {\n        this.setState( {settingsOpen : true} );\n      };\n\n      const handleDrawerClose = () => {\n        this.setState( {settingsOpen : false} );\n      };\n\n      const settingsChangeCallback = (config) => {\n        this.setState( { formatSettings: config } );\n      };\n\n      const handlePatternsClose = (e) => {\n        this.setState( { patternsOpen : false } );\n      };\n      const handlePatternsOpen = (e) => {\n        this.setState( { patternsOpen : true } );\n      };\n\n      const classes = this.props;\n      const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n      return (\n        <React.Fragment>\n          <div style={{display:\"flex\", width: \"95%\"}}> \n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handlePatternsOpen}\n              className={clsx({\n                [classes.hide] : !this.state.patternsOpen\n              })}\n            >\n              <ChevronRightIcon />\n            </IconButton>\n            <div className=\"content-title\" style={{flexGrow:1}}>\n            </div>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"end\"\n              onClick={handleDrawerOpen}\n              className={clsx(this.state.settingsOpen && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n          </div>\n          {patternContent}\n\n        <SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS}\n          className={classes.drawer}\n          variant=\"persistent\"\n          open={this.state.patternsOpen}\n          onOpen={handlePatternsOpen}\n          onOpen={handlePatternsClose}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handlePatternsClose}>\n                <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={classes.drawerContainer}>\n            <List>\n              {(this.state.patterns ?? []).map( (pattern, index) => (\n                <ListItem button key={\"drawer-pattern\" + index.toString()} onClick={() => this.selectPattern(index)}>\n                    <ListItemText primary={pattern.name} />\n                </ListItem>\n              ))}\n            </List>\n          </div>\n        </SwipeableDrawer>\n        <SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS}\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"right\"\n          open={this.state.settingsOpen}\n          onOpen={handleDrawerOpen}\n          onClose={handleDrawerClose}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n                <ChevronRightIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <FormatSettings onChange={settingsChangeCallback} settings={this.state.formatSettings}/>  \n        </SwipeableDrawer>\n        </React.Fragment>\n      );\n    }\n  }\n\n  render() {\n    const classes = this.props;\n    const mainContent = this.renderMainContent();\n    return (\n      <div className=\"App\">\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          {mainContent}\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// FileUpload.react.js\n\n// inspired by https://gist.github.com/AshikNesin/e44b1950f6a24cfcd85330ffc1713513\n// and https://stackoverflow.com/questions/55830414/how-to-read-text-file-in-react\n\nimport React from 'react'\n\nclass FileImport extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this)\n  }\n\n  onChange(e) {\n    const fileObject = e.target.files[0]\n    const reader = new FileReader()\n    reader.onload = loadEvent => {\n      if( this.props.onImport )\n      {\n        this.props.onImport(\n          { file: fileObject, content : loadEvent.target.result}\n        );\n      }\n    }\n    reader.readAsText(fileObject);\n  }\n\n  render() {\n    return (\n      <input type=\"file\" onChange={this.onChange} />\n   )\n  }\n}\n\nexport default FileImport;\n","import React from 'react';\nimport notation from \"./notation\"\nimport { withStyles } from '@material-ui/core/styles';\n\nconst useStyles = theme => ({\n  root: {\n    \"margin-bottom\": theme.spacing(2),\n    fontFamily: \"Roboto Mono\",\n    textAlign: \"left\",\n    whiteSpace:\"pre\"\n  },\n});\n\n// const classes = useStyles();\n\nclass Pattern extends React.Component\n{\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  // remove me and relpace with me with something way better\n  // this is taken from the notation formatAsPage code\n  formatText(instruments)\n  {\n    let configOverride = this.props.config;\n    let page = [];\n    for( const [instrumentName, instrument] of instruments )\n    {\n      const notationString = notation.fromInstrumentAndTrack(\n        instrument,\n        this.props.tracks,\n        configOverride\n      );\n      page.push(instrumentName);\n      for( const x of notationString.split(\"\\n\"))\n      {\n        page.push(x);\n      }\n    }\n    return page;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        { this.formatText(this.props.instruments).map((x,index) => <p key={index.toString()}>{x}</p>) }\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(Pattern);","// h2.js\n\nimport track from \"./track\"\nimport xml2js from \"xml2js\";\nimport { calculateResolution } from \"./utilities\";\n\n// let's think about the data representation needed\n\nfunction calculatePatternResolution(pattern, size)\n{\n  const positions = Array.from(pattern.notes, note => note.position)\n  return calculateResolution(positions, size);\n}\n\nfunction parseHydrogenJs(result)\n{\n    // fixme:\n    // this parsing often assumes there's >=2 elements\n\n    // this \"zero\" here is presumably an artefact of xml --> json representation\n    const instrumentElements = result.song.instrumentList[0].instrument;\n\n    // instruments\n    // [  { id, name } ]\n    const instrumentArray = Array.from(\n      instrumentElements,\n      function(element){\n        const instrumentComponent = element.instrumentComponent[0];\n        let inst = {\n          \"id\" : parseInt(element.id), \n          \"name\" : element.name,\n           \"volume\" : parseFloat(element.volume), \n           \"muted\" : element.isMuted[0] === \"true\",\n           \"gain\" : parseFloat(element.gain),\n           \"drumkit\" : element.drumkit[0]\n        };\n        if( \"layer\" in instrumentComponent )\n        {\n          inst[\"filename\"] = instrumentComponent.layer[0].filename[0];\n        }\n        return inst;\n      }\n    );\n\n    const patternElements = result.song.patternList[0].pattern;\n    // patterns\n    // [  { name, size, notes } ]\n    const patternArray = Array.from(\n      patternElements,\n      function(element){\n        const noteElements = element.noteList[0].note;\n        const patternSize = parseInt(element.size);\n        let notes = [];\n        if( noteElements )\n        {\n          // notes \n          // [ {position, instrument(id}]\n          notes = Array.from(\n            noteElements,\n            function(noteElement){\n              return {\"position\" : parseInt(noteElement.position), \"instrument\" : parseInt(noteElement.instrument)};\n            }\n          );\n\n          // hydrogen permits you to have notes that reach past the pattern size, \n          // they then get revealed when you extend the pattern, \n          // here's an easy point to get rid of them, we don't want them to factor into any calculations\n          notes = notes.filter( n => n.position < patternSize );\n        }\n        return {\n          \"size\" : patternSize, \n          \"name\" : element.name,\n          \"notes\" : notes\n        };\n      }\n    );\n\n    // transform pattern to a managable data\n    const patternsWithTracks = Array.from(\n      patternArray,\n      function(pattern)\n      { \n        const resolution = calculatePatternResolution(pattern, pattern.size);\n        let instrumentTracks = {};\n        for( const instrument of instrumentArray )\n        {\n          const relevantNotes = pattern.notes.filter( \n            note => (note.instrument === instrument.id)\n          );\n          const relevantHits = Array.from(\n            relevantNotes,\n            note => note.position\n          );\n          instrumentTracks[ instrument.id.toString() ] = track.fromPositions( relevantHits, pattern.size, resolution);\n        }\n        pattern.resolution = resolution;\n        pattern.instrumentTracks = instrumentTracks;\n        return pattern;\n      }\n    );\n\n    return {\n      \"instruments\" : instrumentArray,\n      \"patterns\" : patternsWithTracks\n    }\n}\n\nasync function parseHydrogenPromise(xmlString)\n{\n  let parser = new xml2js.Parser();\n\n  return parser.parseStringPromise(xmlString).then(parseHydrogenJs);\n}\n\nexport default { parseHydrogenPromise };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const DEFAULT_INSTRUMENT_SYMBOLS = {\n  \"Djembe Slap\" : \"S\",\n  \"Djembe Tone\" : \"t\",\n  \"Djembe Bass\" : \"O\",\n  \"Snare Ghost\" : \"-\",\n  \"Snare Accent\" : \"X\",\n  \"Shaker Ghost\" : \"x\",\n  \"Shaker Accent\" : \"X\",\n  \"Click\" : \"X\",\n  \"Bass\" : \"O\",\n  \"Tom\" : \"O\",\n  \"Default\" : \"X\"\n};\n\nfunction normalizeInstrumentsForFiguring(instruments)\n{\n  let n = [];\n  for(const inst of instruments)\n  {\n    let nInst = Object.assign({}, inst);\n    // for some reason these instruments are one-size arrays, and one id ... the track id from hydrogen\n    // this should be fixed, this doesn't make sense\n    nInst.name = nInst.name[0].toLowerCase();\n    n.push( nInst );\n  }\n  return n;\n}\n\nfunction figureDjembes(instrumentsRaw, symbolConfig)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  const djembeTracks = instruments.filter( (inst) => inst.name.includes(\"djembe\") );\n  if(djembeTracks.length === 0)\n  {\n    return [];\n  }\n  else if(djembeTracks.length <= 3)\n  {\n    // let's lazily assume we have a slap, tone, bass\n    const slapArray = Array.from( djembeTracks, (inst) => inst.name.includes(\"slap\") );\n    const toneArray = Array.from( djembeTracks, (inst) => inst.name.includes(\"tone\") );\n    const bassArray = Array.from( djembeTracks, (inst) => inst.name.includes(\"bass\") );\n    for( let i = 0; i < djembeTracks.length; ++i )\n    {\n      let parityCheck = slapArray[i] + toneArray[i] + bassArray[i];\n      // failed to figure out how djembes work return empty array\n      if(parityCheck !== 1)\n      {\n        return [];\n      }\n    }\n    let djembeMapping = {};\n    for( let i = 0; i < djembeTracks.length; ++i )\n    {\n      if( slapArray[i] )\n      {\n        djembeMapping[ djembeTracks[i].id.toString() ] = symbolConfig[\"Djembe Slap\"];\n      }\n      else if( toneArray[i] )\n      {\n        djembeMapping[ djembeTracks[i].id.toString() ] = symbolConfig[\"Djembe Tone\"];\n      }\n      else if( bassArray[i] )\n      {\n        djembeMapping[ djembeTracks[i].id.toString() ] = symbolConfig[\"Djembe Bass\"];\n      }\n    }\n    return [ [ \"Djembe\", djembeMapping ] ];\n  }\n  else\n  {\n    // TODO: support more than one djembe\n    return []\n  }\n}\n\n// used by snare/shaker\nfunction manageAccentOrGhost(instrumentTracks, instrumentName, accentSymbol, ghostSymbol)\n{\n  let outputInstruments = [];\n  if(instrumentTracks.length === 2)\n  {\n    const t0 = instrumentTracks[0];\n    const t1 = instrumentTracks[1];\n    // attempt to determine ghost/accent\n    const zeroLouder = t0.volume > t1.volume || (t0.volume === t1.volume && t0.gain > t1.gain);\n    let mapping = {};\n    mapping[ t0.id.toString() ] = zeroLouder ? accentSymbol : ghostSymbol;\n    mapping[ t1.id.toString() ] = zeroLouder ? ghostSymbol : accentSymbol;\n    outputInstruments.push([instrumentName, mapping] );  \n  }\n  else // if 1 it must be an accent, if >= 3 ... I don't want to try and assign ghosts/accents\n  {\n    // I don't want to support ghost/accent here right now\n    for( const track of instrumentTracks )\n    {\n      let mapping = {};\n      mapping[ track.id.toString() ] = accentSymbol;\n      outputInstruments.push([instrumentName, mapping] );  \n    }\n  }\n  return outputInstruments;\n\n}\n\nfunction figureShakers(instrumentsRaw, symbolConfig)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  // todo: support common alternative shakers? Tambourine?\n  const shakerTracks = instruments.filter( (inst) => ( inst.name.includes(\"shaker\") ) );\n  return manageAccentOrGhost( \n    shakerTracks, \n    \"Shaker\", \n    symbolConfig[\"Shaker Accent\"],\n    symbolConfig[\"Shaker Ghost\"]\n  );\n}\n\nfunction figureSnares(instrumentsRaw, symbolConfig)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  const snareTracks = instruments.filter( (inst) => ( inst.name.includes(\"snare\") ) );\n  // todo: we currently assume 2 snares is accent/ghost ... but I think it's relatively\n  // common to be 2 snare parts too, I think the algorithm here is check patterns to\n  // see if they overlap ... if the \"ghosts\" overlap the \"hits\" sometimes, assume 2 parts\n  return manageAccentOrGhost( \n    snareTracks, \n    \"Snare\", \n    symbolConfig[\"Snare Accent\"],\n    symbolConfig[\"Snare Ghost\"]\n  );\n}\n\n\nfunction activeInstruments(patterns)\n{\n  let nonTrivialInstruments = new Set();\n  for( const p of patterns )\n  {\n    for(const [instrumentID, part] of Object.entries(p.instrumentTracks))\n    {\n      if( !part.empty() )\n      {\n        nonTrivialInstruments.add(parseInt(instrumentID));\n      }\n    }\n  }\n  return nonTrivialInstruments;\n}\n\nfunction activeInstrumentation(instrumentIndex, patterns)\n{\n  const active = activeInstruments(patterns);\n  let nonTrivialInstruments = [];\n  for( const inst of instrumentIndex)\n  {\n    if( active.has(inst.id) )\n    {\n      nonTrivialInstruments.push( inst );\n    }\n  }\n  return nonTrivialInstruments;\n}\n\nfunction figureClickyInstruments(instrumentsRaw, symbolConfig, patterns)\n{\n  const instruments = normalizeInstrumentsForFiguring(instrumentsRaw);\n  const worthwhileInstruments = activeInstruments(patterns);\n  const relevantTracks = instruments.filter( (inst) => ( worthwhileInstruments.has(inst.id) &&\n    !inst.name.includes(\"djembe\") &&\n    ( inst.name.includes(\"click\") || \n    inst.name.includes(\"stick\") || \n    inst.name.includes(\"tom\") || \n    inst.name.includes(\"bass\") ||\n    inst.name.includes(\"kick\") )\n  ) );\n\n  const trackIsClick = Array.from(\n    relevantTracks,\n    (t) => t.name.includes(\"click\") || t.name.includes(\"stick\")\n  );\n  // we rioritise the early tracks\n  // and hope for the best\n\n  let collated = [];\n  for( let candidate = 0; candidate < Math.floor(relevantTracks.length/2); ++candidate )\n  {\n    if( trackIsClick[candidate*2] !== trackIsClick[candidate*2+1] )\n    {\n      const clickTrack = trackIsClick[candidate*2] ? relevantTracks[candidate*2] : relevantTracks[candidate*2+1];\n      const hitTrack = trackIsClick[candidate*2] ? relevantTracks[candidate*2+1] : relevantTracks[candidate*2];\n      const instrumentIsTom = hitTrack.name.includes(\"tom\");\n      const instrumentName = instrumentIsTom ? \"Tom\" : \"Bass\";\n      let mapping = {};\n      mapping[hitTrack.id.toString()] = symbolConfig[instrumentName];\n      mapping[clickTrack.id.toString()] = symbolConfig[\"Click\"];\n      collated.push([instrumentName, mapping] );  \n    }\n  }\n\n  // If there's a remainder instrument and there's no click\n  if( ((relevantTracks.length % 2 ) !== 0) && !trackIsClick[ relevantTracks.length - 1 ] )\n  {\n    const lastTrack = relevantTracks[relevantTracks.length - 1];\n    const instrumentName = lastTrack.name.includes(\"tom\") ? \"Tom\" : \"Bass\";\n    let mapping = {};\n    mapping[lastTrack.id.toString()] = symbolConfig[instrumentName];\n    collated.push([instrumentName, mapping] );  \n  }\n\n  return collated;\n}\n\nfunction figureInstruments(instrumentsRaw, symbolConfig, patterns)\n{\n  let output = [];\n  output = output.concat( figureClickyInstruments( instrumentsRaw, symbolConfig, patterns ) );\n  output = output.concat( figureDjembes( instrumentsRaw, symbolConfig ) );\n  output = output.concat( figureSnares( instrumentsRaw, symbolConfig ) );\n  output = output.concat( figureShakers( instrumentsRaw, symbolConfig ) );\n\n  // we ignore track used by multiple instruments\n\n  // but attempt to cover \"instrument not recognised anywhere\"\n\n  const worthwhileInstruments = activeInstruments(patterns);\n\n  for(const inst of instrumentsRaw)\n  {\n    if( !worthwhileInstruments.has(inst.id) )\n    {\n      continue;\n    }\n    let instrumentUsed = false;\n    for( const op of output)\n    {\n      if( inst.id.toString() in op[1] ) \n      {\n        instrumentUsed = true;\n      }\n    }\n    if(instrumentUsed === false)\n    {\n      let mapping = {};\n      mapping[ inst.id.toString() ] = symbolConfig[\"Default\"];\n      output.push( [inst.name[0], mapping] );\n    }\n  }\n  \n  return output; \n}\n\nexport { activeInstrumentation, DEFAULT_INSTRUMENT_SYMBOLS, figureClickyInstruments, figureDjembes, figureShakers, figureSnares, figureInstruments };","\nclass notation\n{\n\n  static DEFAULT_FORMAT_CONFIG = {\n    \"restMark\" : \"-\",\n    \"beatMark\" : \"|\",\n    \"lineMark\" : \"|\",\n    \"numberRestMark\" : \"-\",\n    \"beatResolution\" : 48,\n    \"showBeatMark\" : true,\n    \"showBeatNumbers\" : true,\n    // lineResolution needs to be determined on a per-pattern-basis \n    // so let's just not cut the lines apart, by default\n    \"lineResolution\" : 48 * 16\n  };\n\n  static FORMAT_CONFIG_STRINGS = [\n    [\"restMark\",[\"-\", \".\", \" \"]],\n    [\"numberRestMark\",[\"-\", \".\", \" \"]],\n    [\"beatResolution\",[\"24\", \"48\", \"96\"]]\n  ];\n\n  static FORMAT_CONFIG_BOOLS = [\n    \"showBeatMark\",\n    \"showBeatNumbers\"\n  ];\n\n  static validateConfig(config, patternResolution) {\n    if( patternResolution != null && ( config.beatResolution % patternResolution ) !== 0 )\n    {\n      throw new Error(\"patternResolution doesn't divide beatResolution\");\n    }\n    if( config.lineResolution <= 0 )\n    {\n      throw new Error(\"config.lineResolution doesn't divide patternResolution\");\n    }\n  }\n\n  static chunkString(str, chunkSize) {\n    if( chunkSize <= 0 )\n    {\n      throw new Error(\"chunkSize must be > 0\")\n    }\n    return str.match(new RegExp('.{1,' + chunkSize + '}', 'g'));\n  }\n\n  static createNumberMarker(config, patternResolution, patternSize)\n  {\n    if( patternResolution <= 0 || patternSize <= 0 )\n    {\n      throw new Error(\"(patternResolution, patternSize) arguments <= 0\");\n    }\n    if( ( patternSize % patternResolution) !== 0 )\n    {\n      throw new Error(\"patternSize,doesn't divide patternResolution\");\n    }\n\n    notation.validateConfig(config, patternResolution);\n\n    // note, this assumes that each line makes this match evenly\n    // but ... there's nothing you can do in that case really unless you take an array of lineResolutions\n    const lineLength = Math.min(patternSize, config.lineResolution);\n    let beatCount = Math.ceil(lineLength / config.beatResolution);\n\n    let numberMarkerArray = Array.from( Array(lineLength / patternResolution), e => config.numberRestMark );\n\n    for( let beat = 0; beat < beatCount; beat++ )\n    {\n      numberMarkerArray[ beat * ( config.beatResolution / patternResolution ) ] = ( (beat+1) % 10 ).toString();\n    }\n    return numberMarkerArray.join(\"\");\n  }\n\n  static formatLineWithMarkers(config, line, patternResolution)\n  {\n    notation.validateConfig(config);\n\n    const beatChunkSize = config.beatResolution / patternResolution;\n\n\n    const lineWithBeats = config.showBeatMark ? notation.chunkString(line, beatChunkSize).join(config.beatMark) : line;\n    // note: we choose to always show the lineMarker even if it doesn't match the line resolution\n    return config.lineMark + lineWithBeats + config.lineMark;\n  }\n\n  static fromInstrumentAndTrack(\n    instrument,\n    trackDict,\n    formatConfig = {}\n  )\n  {\n    for( const propName of Object.keys(formatConfig))\n    {\n      if(!notation.DEFAULT_FORMAT_CONFIG.hasOwnProperty(propName))\n      {\n        throw new Error(\"passed unrecognised property \" + propName);\n      }\n    }\n\n    let config = Object.assign( Object.assign({}, notation.DEFAULT_FORMAT_CONFIG), formatConfig );\n\n    let instrumentTracks = Object.values(trackDict);\n    if(instrumentTracks.length === 0)\n    {\n      return \"\";\n    }\n\n    // turn the tracks, into one char string\n\n    const patternSize = instrumentTracks[0].length();\n    const patternResolution = instrumentTracks[0].resolution;\n    const notationLength = instrumentTracks[0].length() / instrumentTracks[0].resolution;\n    // we only format tracks to the correct resolution\n    let patternArray = Array(notationLength).fill(config.restMark);\n    for( let charIndex = 0; charIndex < patternArray.length; ++charIndex)\n    {\n      // todo: handle collisions\n      for( const [trackID, trackSymbol] of Object.entries(instrument) )\n      {\n        const trackInstance = trackDict[trackID];\n        if( trackInstance != null && trackInstance.rep[charIndex] === 1 )\n        {\n          patternArray[charIndex] = trackSymbol;\n        }\n      }\n    }\n    const patternString = patternArray.join(\"\");\n\n    // handle lines and beatMarkers\n    let lineArray = notation.chunkString( patternString, config.lineResolution / patternResolution );\n\n    let formattedLineArray = [];\n    // add numbers on the first line\n    if( config.showBeatNumbers )\n    {\n      formattedLineArray.push( notation.formatLineWithMarkers( \n        config, \n        notation.createNumberMarker(config, patternResolution, patternSize), \n        patternResolution \n      ) );\n    }\n    for( let i = 0; i < lineArray.length; ++i )\n    {\n      formattedLineArray.push( notation.formatLineWithMarkers( config, lineArray[i], patternResolution ));\n    }\n\n    return formattedLineArray.join(\"\\n\");\n  }\n};\n\nexport default notation;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n// table\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  }\n}));\n\nconst ThinFormControlLabel = withStyles({\n  root: {\n    marginLeft: 0,\n    marginRight: 0\n  }\n})(FormControlLabel);\n\nconst InlinableIconButton = withStyles({\n  root: {\n    padding: 2\n  }\n})(IconButton);\n\nconst CenterTableCell = withStyles({\n  root: {\n    textAlign: \"center\"\n  }\n})(TableCell);\n\nfunction InstrumentConfig(props) {\n  const classes = useStyles();\n\n  const handleChange = (x,y, event) => {\n    const instrumentID = props.instrumentIndex[x].id;\n    const oldInstrumentIndex = props.instruments.findIndex( instrument => instrumentID in instrument[1]);\n    const dstInstrumentIndex = y;\n    if( oldInstrumentIndex === dstInstrumentIndex )\n    {\n      return;\n    }\n    const oldInstrument = props.instruments[oldInstrumentIndex];\n    let replacedSrcInstrument = [\n      \"\",\n      {}\n    ];\n    if( oldInstrument != null )\n    {\n      replacedSrcInstrument[0] = oldInstrument[0];\n      for( const key of Object.keys(oldInstrument[1]) )\n      {\n        if( key !== instrumentID.toString() )\n        {\n          replacedSrcInstrument[1][key] = oldInstrument[1][key];\n        }\n      }\n    }\n    let dstInstrument = [\n      props.instruments[dstInstrumentIndex][0],\n      Object.assign({}, props.instruments[dstInstrumentIndex][1] )\n    ];\n    if(oldInstrument != null )\n    {\n      dstInstrument[1][instrumentID.toString()] = oldInstrument[1][instrumentID];\n    }\n    else\n    {\n      dstInstrument[1][instrumentID.toString()] = \"X\";\n    }\n\n    let replacedInstruments = [];\n\n    for(let instrumentIndex = 0; instrumentIndex < props.instruments.length; ++instrumentIndex)\n    {\n      if( instrumentIndex === oldInstrumentIndex )\n      {\n        replacedInstruments.push( replacedSrcInstrument );\n      }\n      else if( instrumentIndex === dstInstrumentIndex )\n      {\n        replacedInstruments.push( dstInstrument )\n      }\n      else\n      {\n        replacedInstruments.push( props.instruments[instrumentIndex] );\n      }\n    }\n    props.onChange(replacedInstruments);\n  };\n\n  const removeInstrument = (y) => \n  {\n    let replacedInstruments = props.instruments.slice(0,y).concat(props.instruments.slice(y+1));\n    props.onChange(replacedInstruments);\n  };\n\n  const [renamingInstrument, setRenamingInstrument] = React.useState(-1);\n  let [nameState, setNameState] = React.useState(\"\");\n\n  const createCell = (x,y) =>\n  {\n      return ( \n        <TableCell\n          align=\"center\"\n        >\n        <ThinFormControlLabel\n          control={<Checkbox checked={props.instrumentMask[x] === y} onChange={(e) => handleChange(x,y,e)} name={x + \",\" + y.toString()} />}\n        />\n        </TableCell>\n      );\n  }\n\n  const createMatchingRow = (y) =>\n  {\n    return (\n      <TableRow>\n        <TableCell component=\"th\" scope=\"row\">\n          <Typography>{props.instruments[y][0]}</Typography>\n          <InlinableIconButton onClick={(e)=>setRenamingInstrument(y)}><EditIcon fontSize=\"small\"/></InlinableIconButton>\n          <InlinableIconButton onClick={(e)=>{removeInstrument(y);}}><ClearIcon fontSize=\"small\"/></InlinableIconButton>\n        </TableCell>\n        {[...Array(props.instrumentIndex.length).keys()].map(x=>createCell(x,y))}\n      </TableRow>\n    );\n  };\n\n  const createEditRow = () =>\n  {\n    return (\n      <TableRow>\n        <TableCell component=\"th\" scope=\"row\"><IconButton onClick={(e)=>setRenamingInstrument(props.instruments.length)} aria-label=\"add\"><AddBoxIcon/></IconButton></TableCell>\n      </TableRow>\n    );\n  };\n\n  const renameInstrument = (e)  => \n  {\n    const instrumentName = nameState.trim();\n    if( instrumentName.length > 0 )\n    {\n      if( renamingInstrument === props.instruments.length )\n      {\n        const extraInstrument = [ instrumentName, {} ];\n        let replacedInstruments = Array.from( props.instruments );\n        replacedInstruments.push(extraInstrument);\n        props.onChange(replacedInstruments);\n      }\n      else\n      {\n        let replacedInstruments = Array.from( props.instruments );\n        replacedInstruments[renamingInstrument][0] = instrumentName;\n        props.onChange(replacedInstruments);\n      }\n    }\n    // we just ignore empty string\n    setRenamingInstrument(-1);\n    setNameState(\"\");\n  };\n\n  // todo: The text field is very slow\n  // that could be because the dialog and the table content are all one component\n  // I should try and fix that first\n  // otherwise, it's just that shoving react in the middle is too slow\n\n  const [editSymbol, setEditSymbol] = React.useState(-1);\n  let [editSymbolState, setEditSymbolState] = React.useState(\"\");\n\n  const startEditingSymbol = (x) =>\n  {\n    const instrumentID = props.instrumentIndex[x].id;\n    const instrumentIndex = props.instruments.findIndex( instrument => instrumentID in instrument[1]);\n    const currentSymbol = props.instruments[instrumentIndex][1][instrumentID];\n    setEditSymbolState(currentSymbol);\n    setEditSymbol(x);\n  };\n\n  const changeSymbol = (e) =>\n  {\n    const updatedSymbol = editSymbolState;\n    if(updatedSymbol.length==1)\n    {\n      const instrumentID = props.instrumentIndex[editSymbol].id;\n      const instrumentIndex = props.instruments.findIndex( instrument => instrumentID in instrument[1]);\n      let replacedInstruments = Array.from(props.instruments);\n      replacedInstruments[instrumentIndex][1][instrumentID] = editSymbolState;\n      props.onChange(replacedInstruments);\n    }\n    else\n    {\n      // todo: prettier error communication?\n      alert(\n        \"You selected an invalid symbol \\\"\" + updatedSymbol + \"\\\".\\n\" + \n        \"Symbols must be precisely 1 character.\"\n      );\n    }\n    setEditSymbol(-1);\n  };\n\n  return (\n    <React.Fragment>\n      <Dialog open={renamingInstrument >= 0} onClose={(e)=>setRenamingInstrument(-1)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\"></DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter instrument name\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            fullWidth\n            value={nameState}\n            onChange={(e)=>setNameState(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={(e)=>setRenamingInstrument(-1)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={renameInstrument} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={editSymbol >= 0} onClose={(e)=>setEditSymbol(-1)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\"></DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter notation symbol\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            fullWidth\n            value={editSymbolState}\n            onChange={(e)=>setEditSymbolState(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={(e)=>setEditSymbol(-1)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={changeSymbol} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <TableContainer>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell> Instrument </TableCell>\n              {[...Array(props.instrumentIndex.length).keys()].map(x=><CenterTableCell><Typography>{props.instrumentIndex[x].name}</Typography><InlinableIconButton onClick={(e)=>startEditingSymbol(x)} ><EditIcon fontSize=\"small\"/></InlinableIconButton></CenterTableCell>)}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {[...Array(props.instruments.length).keys()].map(y=>createMatchingRow(y))}\n            {createEditRow()}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </React.Fragment>\n  );\n}\n\nfunction createInstrumentMask(instrumentIndex, instruments)\n{\n  let instrumentMask = Array(instrumentIndex.length);\n  for( let baseInstrumentIndex = 0; baseInstrumentIndex < instrumentIndex.length; ++baseInstrumentIndex )\n  {\n    const baseInstrumentId = instrumentIndex[baseInstrumentIndex].id;\n    for( let targetInstrumentIndex = 0; targetInstrumentIndex < instruments.length; ++targetInstrumentIndex)\n    {\n      const target = instruments[targetInstrumentIndex];\n      if(baseInstrumentId.toString() in target[1])\n      {\n        instrumentMask[baseInstrumentIndex] = targetInstrumentIndex;\n      }\n    }\n  }\n  return instrumentMask;\n}\n\nexport { createInstrumentMask, InstrumentConfig };","import { calculateResolution } from \"./utilities\"\n\n// stolen from https://studymaths.co.uk/topics/findingHCFWithJavaScript.php\nfunction findHCF(x, y) {\n\n   // If the input numbers are less than 1 return an error message.\n   if (x < 1 || y < 1) {\n    throw new Error(\"x<1 || y<1\");\n      // return \"Please enter values greater than zero.\";\n   }\n\n   // Now apply Euclid's algorithm to the two numbers.\n   while (Math.max(x, y) % Math.min(x, y) !== 0) {\n      if (x > y) {\n         x %= y;\n      }\n      else {\n         y %= x;\n      }\n   }\n   \n   // When the while loop finishes the minimum of x and y is the HCF.\n   return Math.min(x, y);\n}\n\nclass track\n{\n  \n  constructor(patternArray, resolution)\n  {\n    if(patternArray.length === 0)\n    {\n      throw new Error(\"patternArray must not be zero length\");\n    }\n    this.rep = patternArray;\n    this.resolution = resolution;\n  }\n\n  length()\n  {\n    return this.rep.length * this.resolution;\n  }\n\n  empty()\n  {\n    return this.rep.reduce( (a,b) => ( a + b ) ) === 0;\n  }\n\n  _sumOverlapsOfArrays(a,b)\n  {\n    let count = 0;\n    for( let i = 0; i < a.length; ++i)\n    {\n      if(a[i] && b[i])\n      {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  countOverlaps(other)\n  {\n    if( this.resolution === other.resolution )\n    {\n      return this._sumOverlapsOfArrays( this.rep, other.rep );\n    }\n    else\n    {\n      const hcf = findHCF(this.resolution, other.resolution);\n      const a = this.formatResolution( hcf );\n      const b = other.formatResolution( hcf );\n      return this._sumOverlapsOfArrays( a.rep, b.rep );\n    }\n  }\n\n  static representPoints(points, resolution, size)\n  {\n    if( size <= 0 )\n    {\n      throw new Error(\"size must be greater than zero\");\n    }\n    if( size < resolution || (size % resolution) !== 0)\n    {\n      throw new Error(\"resolution must be less than size and divide it evenly\");\n    }\n    let s = new Array(size / resolution).fill(0);\n    for( const p of points )\n    {\n      if( (p % resolution) !== 0)\n      {\n        throw new Error(\"Failed to represent point \" + p.toString() + \" at resolution \" + resolution.toString());\n      }\n      if (p >= size)\n      {\n        throw new Error(\"Failed to represent point \" + p.toString() + \" for invalid specified size \" + size.toString());\n      }\n      const arrayIndex = p / resolution;\n      s[arrayIndex] = 1;\n    }\n    return s;\n  }\n\n  format(formatResolution)\n  {\n    // formatResolution must cleanly divide for every hit & the length of the pattern\n\n    const totalLength = (this.resolution * this.rep.length);\n    const points = this.toPoints();\n    const rep = track.representPoints(points, formatResolution, totalLength);\n    if(!rep)\n    {\n      return null;\n    }\n    return new track(\n      rep,\n      formatResolution\n    );\n  }\n\n  toPoints()\n  {\n    let points = [];\n    for( const arrayIndex of Array(this.rep.length).keys() )\n    {\n      const indicator = this.rep[arrayIndex];\n      if(indicator)\n      {\n        points.push( this.resolution * arrayIndex )\n      }\n    }\n    return points;\n  }\n\n  static fromPositions(positions, size, resolution = null)\n  {\n    const resolutionToUse = resolution ?? calculateResolution( positions, size );\n    return new track( \n      track.representPoints(positions, resolutionToUse, size), \n      resolutionToUse\n    );\n  }\n}\n\nexport default track;","// utilities.js\n\nfunction calculateResolution(positions, size)\n{\n  // hydrogen treats 48 as a beat\n  const basesToTry = [\n    48, // beat\n    24, // 1/2 beat\n    16, // 1/3 beat\n    12, // 1/4\n    8, // 1/6 \n    6, // 1/8\n    4, // 1/12\n    3, // 1/16\n    2, // 1/24\n    1 // 1/48\n  ];\n\n  // note that, fundamentally the size of the pattern is a \"keypoint\"\n  // that needs to be properly recorded by the resolution\n  const implicitPositions = positions.concat( [size] );\n\n  for( const b of basesToTry )\n  {\n    let allNotesPass = true;\n    for( const p of implicitPositions )\n    {\n      if( (p % b) !== 0 )\n      {\n        allNotesPass = false;\n        break;\n      }\n    }\n    if(allNotesPass)\n    {\n      return b;\n    }\n  }\n  throw new Error(\"Failed to predict base\");\n}\n\nexport { calculateResolution };"],"sourceRoot":""}